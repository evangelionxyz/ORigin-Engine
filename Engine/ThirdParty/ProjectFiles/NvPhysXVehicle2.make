# Alternative GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

# Configurations
# #############################################

RESCOMP = windres
INCLUDES += -I../nvphysx/physx/include -I../nvphysx/physx/source/common/include -I../nvphysx/physx/source/common/src -I../nvphysx/physx/source/physxvehicle2/src -I../nvphysx/physx/source/physxvehicle2/src/physxmetadata/include -I../nvphysx/physx/source/physxmetadata/extensions/include -I../nvphysx/physx/source/physxmetadata/core/include -I../nvphysx/physx/source/physxextensions/src/serialization/Xml -I../nvphysx/physx/source/pvdsdk/src -I../nvphysx/physx/source/pvd/include -I../nvphysx/physx/source/foundation/include
FORCE_INCLUDE +=
ALL_CPPFLAGS += $(CPPFLAGS) -MD -MP $(DEFINES) $(INCLUDES)
ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
define PREBUILDCMDS
endef
define PRELINKCMDS
endef
define POSTBUILDCMDS
endef

ifeq ($(config),debug)
TARGETDIR = ../../Build/VS2022/Debug/Binaries/ThirdParty
TARGET = $(TARGETDIR)/NvPhysXVehicle2.lib
OBJDIR = ../../Build/VS2022/Debug/Objs/ThirdParty/NvPhysXVehicle2
DEFINES += -DWIN32 -DWIN64 -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE -D_WINSOCK_DEPRECATED_NO_WARNINGS -DPX_PHYSX_GPU_SHARED_LIB_NAME=PhysXGpu_64.dll -DPX_PHYSX_STATIC_LIB -DPX_SUPPORT_PVD=1 -DPX_DEBUG=1 -DPX_CHECKED=1 -DPX_NVTX=0 -D_DEBUG
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O0 -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O0 -g -std=c++17
LIBS += ../../Build/VS2022/Debug/Binaries/ThirdParty/NvPhysXFoundation.lib ../../Build/VS2022/Debug/Binaries/ThirdParty/NvPhysXPvdSDK.lib
LDDEPS += ../../Build/VS2022/Debug/Binaries/ThirdParty/NvPhysXFoundation.lib ../../Build/VS2022/Debug/Binaries/ThirdParty/NvPhysXPvdSDK.lib
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64

else ifeq ($(config),release)
TARGETDIR = ../../Build/VS2022/Release/Binaries/ThirdParty
TARGET = $(TARGETDIR)/NvPhysXVehicle2.lib
OBJDIR = ../../Build/VS2022/Release/Objs/ThirdParty/NvPhysXVehicle2
DEFINES += -DWIN32 -DWIN64 -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE -D_WINSOCK_DEPRECATED_NO_WARNINGS -DPX_PHYSX_GPU_SHARED_LIB_NAME=PhysXGpu_64.dll -DPX_PHYSX_STATIC_LIB -DPX_SUPPORT_PVD=1 -D_HAS_ITERATOR_DEBUGGING=0 -D_ITERATOR_DEBUG_LEVEL=0 -DPX_CHECKED=1 -DPX_NVTX=0 -DNDEBUG
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -g -std=c++17
LIBS += ../../Build/VS2022/Release/Binaries/ThirdParty/NvPhysXFoundation.lib ../../Build/VS2022/Release/Binaries/ThirdParty/NvPhysXPvdSDK.lib
LDDEPS += ../../Build/VS2022/Release/Binaries/ThirdParty/NvPhysXFoundation.lib ../../Build/VS2022/Release/Binaries/ThirdParty/NvPhysXPvdSDK.lib
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64

else ifeq ($(config),dist)
TARGETDIR = ../../Build/VS2022/Dist/Binaries/ThirdParty
TARGET = $(TARGETDIR)/NvPhysXVehicle2.lib
OBJDIR = ../../Build/VS2022/Dist/Objs/ThirdParty/NvPhysXVehicle2
DEFINES += -DWIN32 -DWIN64 -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE -D_WINSOCK_DEPRECATED_NO_WARNINGS -DPX_PHYSX_GPU_SHARED_LIB_NAME=PhysXGpu_64.dll -DPX_PHYSX_STATIC_LIB -DPX_SUPPORT_PVD=1 -D_HAS_ITERATOR_DEBUGGING=0 -D_ITERATOR_DEBUG_LEVEL=0 -DPX_CHECKED=1 -DNDEBUG
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O2
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -std=c++17
LIBS += ../../Build/VS2022/Dist/Binaries/ThirdParty/NvPhysXFoundation.lib ../../Build/VS2022/Dist/Binaries/ThirdParty/NvPhysXPvdSDK.lib
LDDEPS += ../../Build/VS2022/Dist/Binaries/ThirdParty/NvPhysXFoundation.lib ../../Build/VS2022/Dist/Binaries/ThirdParty/NvPhysXPvdSDK.lib
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -s

endif

# Per File Configurations
# #############################################


# File sets
# #############################################

GENERATED :=
OBJECTS :=

GENERATED += $(OBJDIR)/VhCommandHelpers.o
GENERATED += $(OBJDIR)/VhDrivetrainFunctions.o
GENERATED += $(OBJDIR)/VhDrivetrainHelpers.o
GENERATED += $(OBJDIR)/VhPhysXActorFunctions.o
GENERATED += $(OBJDIR)/VhPhysXActorHelpers.o
GENERATED += $(OBJDIR)/VhPhysXConstraintFunctions.o
GENERATED += $(OBJDIR)/VhPhysXConstraintHelpers.o
GENERATED += $(OBJDIR)/VhPhysXRoadGeometryFunctions.o
GENERATED += $(OBJDIR)/VhPhysXRoadGeometryHelpers.o
GENERATED += $(OBJDIR)/VhPvdFunctions.o
GENERATED += $(OBJDIR)/VhPvdHelpers.o
GENERATED += $(OBJDIR)/VhPvdWriter.o
GENERATED += $(OBJDIR)/VhRigidBodyFunctions.o
GENERATED += $(OBJDIR)/VhSteeringFunctions.o
GENERATED += $(OBJDIR)/VhSuspensionFunctions.o
GENERATED += $(OBJDIR)/VhSuspensionHelpers.o
GENERATED += $(OBJDIR)/VhTireFunctions.o
GENERATED += $(OBJDIR)/VhTireHelpers.o
GENERATED += $(OBJDIR)/VhWheelFunctions.o
OBJECTS += $(OBJDIR)/VhCommandHelpers.o
OBJECTS += $(OBJDIR)/VhDrivetrainFunctions.o
OBJECTS += $(OBJDIR)/VhDrivetrainHelpers.o
OBJECTS += $(OBJDIR)/VhPhysXActorFunctions.o
OBJECTS += $(OBJDIR)/VhPhysXActorHelpers.o
OBJECTS += $(OBJDIR)/VhPhysXConstraintFunctions.o
OBJECTS += $(OBJDIR)/VhPhysXConstraintHelpers.o
OBJECTS += $(OBJDIR)/VhPhysXRoadGeometryFunctions.o
OBJECTS += $(OBJDIR)/VhPhysXRoadGeometryHelpers.o
OBJECTS += $(OBJDIR)/VhPvdFunctions.o
OBJECTS += $(OBJDIR)/VhPvdHelpers.o
OBJECTS += $(OBJDIR)/VhPvdWriter.o
OBJECTS += $(OBJDIR)/VhRigidBodyFunctions.o
OBJECTS += $(OBJDIR)/VhSteeringFunctions.o
OBJECTS += $(OBJDIR)/VhSuspensionFunctions.o
OBJECTS += $(OBJDIR)/VhSuspensionHelpers.o
OBJECTS += $(OBJDIR)/VhTireFunctions.o
OBJECTS += $(OBJDIR)/VhTireHelpers.o
OBJECTS += $(OBJDIR)/VhWheelFunctions.o

# Rules
# #############################################

all: $(TARGET)
	@:

$(TARGET): $(GENERATED) $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	$(PRELINKCMDS)
	@echo Linking NvPhysXVehicle2
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning NvPhysXVehicle2
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(GENERATED)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(GENERATED)) del /s /q $(subst /,\\,$(GENERATED))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild: | $(OBJDIR)
	$(PREBUILDCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) | $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | prebuild
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) touch "$@"
else
	$(SILENT) echo $null >> "$@"
endif
else
$(OBJECTS): | prebuild
endif


# File Rules
# #############################################

$(OBJDIR)/VhCommandHelpers.o: ../nvphysx/physx/source/physxvehicle2/src/commands/VhCommandHelpers.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VhDrivetrainFunctions.o: ../nvphysx/physx/source/physxvehicle2/src/drivetrain/VhDrivetrainFunctions.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VhDrivetrainHelpers.o: ../nvphysx/physx/source/physxvehicle2/src/drivetrain/VhDrivetrainHelpers.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VhPhysXActorFunctions.o: ../nvphysx/physx/source/physxvehicle2/src/physxActor/VhPhysXActorFunctions.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VhPhysXActorHelpers.o: ../nvphysx/physx/source/physxvehicle2/src/physxActor/VhPhysXActorHelpers.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VhPhysXConstraintFunctions.o: ../nvphysx/physx/source/physxvehicle2/src/physxConstraints/VhPhysXConstraintFunctions.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VhPhysXConstraintHelpers.o: ../nvphysx/physx/source/physxvehicle2/src/physxConstraints/VhPhysXConstraintHelpers.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VhPhysXRoadGeometryFunctions.o: ../nvphysx/physx/source/physxvehicle2/src/physxRoadGeometry/VhPhysXRoadGeometryFunctions.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VhPhysXRoadGeometryHelpers.o: ../nvphysx/physx/source/physxvehicle2/src/physxRoadGeometry/VhPhysXRoadGeometryHelpers.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VhPvdFunctions.o: ../nvphysx/physx/source/physxvehicle2/src/pvd/VhPvdFunctions.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VhPvdHelpers.o: ../nvphysx/physx/source/physxvehicle2/src/pvd/VhPvdHelpers.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VhPvdWriter.o: ../nvphysx/physx/source/physxvehicle2/src/pvd/VhPvdWriter.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VhRigidBodyFunctions.o: ../nvphysx/physx/source/physxvehicle2/src/rigidBody/VhRigidBodyFunctions.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VhSteeringFunctions.o: ../nvphysx/physx/source/physxvehicle2/src/steering/VhSteeringFunctions.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VhSuspensionFunctions.o: ../nvphysx/physx/source/physxvehicle2/src/suspension/VhSuspensionFunctions.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VhSuspensionHelpers.o: ../nvphysx/physx/source/physxvehicle2/src/suspension/VhSuspensionHelpers.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VhTireFunctions.o: ../nvphysx/physx/source/physxvehicle2/src/tire/VhTireFunctions.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VhTireHelpers.o: ../nvphysx/physx/source/physxvehicle2/src/tire/VhTireHelpers.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VhWheelFunctions.o: ../nvphysx/physx/source/physxvehicle2/src/wheel/VhWheelFunctions.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(PCH_PLACEHOLDER).d
endif